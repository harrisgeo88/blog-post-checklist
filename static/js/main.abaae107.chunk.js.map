{"version":3,"sources":["components/Checkbox/Checkbox.jsx","App.js","utils/getListItems/getListItems.js","serviceWorker.js","index.js"],"names":["Checkbox","title","className","type","data-testid","GitHubButton","require","App","params","inputList","document","location","search","includes","split","map","y","decodedItem","decodeURIComponent","charAt","toUpperCase","substr","aProps","target","rel","checklist","lang","tips","tipsList","quote","list","customList","length","href","bannerColor","octoColor","symbol","label","id","size","namespace","repo","checkitem","i","key","message","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"04BAEaA,G,MAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzB,OACE,2BAAOC,UAAU,YACf,2BAAOC,KAAK,aACZ,0BAAMD,UAAU,iBAAiBE,cAAY,YAC1CH,M,uCCEHI,G,YAAeC,EAAQ,KAqEdC,EAnEH,WACV,ICZ2BC,EDYrBC,ICZqBD,EDYIE,SAASC,SAASC,QCX5BC,SAAS,SAAWL,EAAOM,MAAM,KAAK,GAAGA,MAAM,KAAO,IAE9DC,KAAI,SAACC,GAChB,IAAMC,EAAcC,mBAAmBF,GACvC,OAAOC,EAAYE,OAAO,GAAGC,cAAgBH,EAAYI,OAAO,MDS5DC,EAAS,CACbC,OAAQ,SACRC,IAAK,uBAECC,EAAkDC,EAAlDD,UAAWE,EAAuCD,EAAvCC,KAAMC,EAAiCF,EAAjCE,SAAU3B,EAAuByB,EAAvBzB,MAAO4B,EAAgBH,EAAhBG,MAAOC,EAASJ,EAATI,KAC3CC,EAAatB,EAAUuB,OAASvB,EAAYgB,EAClD,OACE,yBAAKvB,UAAU,OACb,4BAAQA,UAAU,UAChB,yBAAKA,UAAU,oBACb,kBAAC,IAAD,eACE+B,KAAK,sDACLC,YAAY,UACZC,UAAU,WACNb,IAEN,wBAAIpB,UAAU,YACZ,kBAAC,IAAD,CAAOkC,OAAO,SAAIC,MAAM,kBAD1B,IAC8CpC,GAE9C,uBAAGqC,GAAG,SAAST,GACf,yBAAKS,GAAG,iBACN,kBAACjC,EAAD,CACEF,KAAK,aACLoC,KAAK,QACLC,UAAU,cACVC,KAAK,wBAEP,kBAACpC,EAAD,CACEH,UAAU,QACVqC,KAAK,QACLpC,KAAK,QACLqC,UAAU,cACVC,KAAK,2BAKb,yBAAKvC,UAAU,aACb,wBAAIA,UAAU,YAAY4B,GAC1B,yBAAK5B,UAAU,aACZ6B,EAAWhB,KAAI,SAAC2B,EAAWC,GAAZ,OACd,kBAAC,EAAD,CAAU1C,MAAOyC,EAAWE,IAAKD,QAGrC,wBAAIzC,UAAU,YAAYyB,GAC1B,4BACGC,EAASb,KAAI,WAAoB4B,GAApB,IAAGV,EAAH,EAAGA,KAAMY,EAAT,EAASA,QAAT,OACZ,wBAAI3C,UAAU,YAAY0C,IAAKD,GAC7B,uBAAGV,KAAMA,EAAMV,OAAO,SAASC,IAAI,uBAChCqB,SAMX,gCACE,qCAAGP,GAAG,aAAaL,KAAK,wBAA2BX,GAAnD,4BE1DYwB,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAAS2C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhB,a","file":"static/js/main.abaae107.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Checkbox = ({ title }) => {\n  return (\n    <label className=\"checkbox\">\n      <input type=\"checkbox\" />\n      <span className=\"checkbox-title\" data-testid=\"checkbox\">\n        {title}\n      </span>\n    </label>\n  )\n}\n","import React from 'react'\nimport { Checkbox } from './components/Checkbox'\nimport { getListItems } from './utils/getListItems'\nimport Emoji from 'a11y-react-emoji'\nimport lang from './lang/en-gb.json'\nimport GithubCorner from 'react-github-corner'\nimport './App.css'\nimport 'react-github-button/assets/style.css'\n\nconst GitHubButton = require('react-github-button')\n\nconst App = () => {\n  const inputList = getListItems(document.location.search)\n\n  const aProps = {\n    target: '_blank',\n    rel: 'noopener noreferrer',\n  }\n  const { checklist, tips, tipsList, title, quote, list } = lang\n  const customList = inputList.length ? inputList : checklist\n  return (\n    <div className=\"App\">\n      <header className=\"banner\">\n        <div className=\"banner-container\">\n          <GithubCorner\n            href=\"https://github.com/harrisgeo88/blog-post-checklist/\"\n            bannerColor=\"#fafffd\"\n            octoColor=\"#3c91e6\"\n            {...aProps}\n          />\n          <h1 className=\"header-1\">\n            <Emoji symbol=\"✍\" label=\"writting hand\" /> {title}\n          </h1>\n          <p id=\"quote\">{quote}</p>\n          <div id=\"github-badges\">\n            <GitHubButton\n              type=\"stargazers\"\n              size=\"large\"\n              namespace=\"harrisgeo88\"\n              repo=\"blog-post-checklist\"\n            />\n            <GitHubButton\n              className=\"hallo\"\n              size=\"large\"\n              type=\"forks\"\n              namespace=\"harrisgeo88\"\n              repo=\"blog-post-checklist\"\n            />\n          </div>\n        </div>\n      </header>\n      <div className=\"main-body\">\n        <h2 className=\"header-2\">{list}</h2>\n        <div className=\"checklist\">\n          {customList.map((checkitem, i) => (\n            <Checkbox title={checkitem} key={i} />\n          ))}\n        </div>\n        <h2 className=\"header-2\">{tips}</h2>\n        <ul>\n          {tipsList.map(({ href, message }, i) => (\n            <li className=\"list-item\" key={i}>\n              <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n                {message}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <footer>\n        <a id=\"created-by\" href=\"https://harrisgeo.me\" {...aProps}>\n          Created by Harris Geo\n        </a>\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","export const getListItems = (params) => {\n  const items = params.includes('items') ? params.split('=')[1].split(',') : []\n\n  return items.map((y) => {\n    const decodedItem = decodeURIComponent(y)\n    return decodedItem.charAt(0).toUpperCase() + decodedItem.substr(1)\n  })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}